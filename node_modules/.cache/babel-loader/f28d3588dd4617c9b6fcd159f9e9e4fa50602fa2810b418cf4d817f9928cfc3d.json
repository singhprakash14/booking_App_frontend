{"ast":null,"code":"// import React, { useState } from 'react';\n// import {\n//   Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow,\n//   Typography, FormControl, InputLabel, Select, MenuItem, Button, TextField,\n// } from '@mui/material';\n\n// const facilities = [\n//     {\n//         name: 'Clubhouse',\n//         slots: [\n//             { startTime: '10:00', endTime: '16:00', price: 100 },\n//             { startTime: '16:00', endTime: '22:00', price: 500 },\n//         ],\n//     },\n//     {\n//         name: 'Tennis Court',\n//         slots: [{ startTime: '00:00', endTime: '23:59', price: 50 }],\n//     },\n// ];\n//  function Booking(){\n//       const [facility, setFacility] = useState(facilities[0].name);\n//     const [date, setDate] = useState('2023-08-01');\n//     const [startTime, setStartTime] = useState('10:00');\n//     const [endTime, setEndTime] = useState('11:00');\n//     const [bookings, setBookings] = useState([]);\n\n//   const isSlotAvailable = (facility, date, startTime, endTime) => {\n//         return !bookings.some(\n//             (booking) =>\n//                 booking.facility === facility &&\n//                 booking.date === date &&\n//                 ((startTime >= booking.startTime && startTime < booking.endTime) ||\n//                     (endTime > booking.startTime && endTime <= booking.endTime) ||\n//                     (startTime <= booking.startTime && endTime >= booking.endTime))\n//         );\n//     };\n//     const handleBooking = () => {\n//         if (!isSlotAvailable(facility, date, startTime, endTime)) {\n//             alert('Booking Failed,  Already Booked');\n//             setBookings([\n//                 ...bookings,\n//                 { facility, date, startTime, endTime, message: 'Booking Failed, Already Booked' },\n//             ]);\n//             return;\n//         }\n\n//         const facilityCon = facilities.find((config) => config.name === facility);\n//         if (!facilityCon) {\n//             alert('Invalid facility selected.');\n//             return;\n//         }\n\n//         const start = new Date(`2000-01-01T${startTime}:00`);\n//         const end = new Date(`2000-01-01T${endTime}:00`);\n//         const bookingDuration = (end - start) / (1000 * 60 * 60); // in hours\n\n//         let totalPrice = 0;\n//         for (const slot of facilityCon.slots) {\n//             const slotStart = new Date(`2000-01-01T${slot.startTime}:00`);\n//             const slotEnd = new Date(`2000-01-01T${slot.endTime}:00`);\n//             const slotDuration = (slotEnd - slotStart) / (1000 * 60 * 60); // in hours\n\n//             if (start >= slotStart && end <= slotEnd && bookingDuration <= slotDuration) {\n//                 totalPrice = slot.price * bookingDuration;\n//                 break;\n//             }\n//         }\n\n//         if (totalPrice > 0) {\n//             setBookings([...bookings, { facility, date, startTime, endTime, totalPrice }]);\n\n//             alert(`Booked, Rs. ${totalPrice}`);\n//         } else {\n\n//             alert('Booking Failed, Invalid Slot');\n//         }\n\n//     };\n\n// return(\n//       <Box maxWidth=\"800px\" mx=\"auto\" p={4}>\n//       <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n//         <Typography variant=\"h5\" fontWeight=\"bold\">Facility Booking App</Typography>\n//         <Box mt={2} width=\"100%\">\n//           <FormControl fullWidth  mt={2}>\n//             <FormControl fullWidth style={{ marginTop: '16px' }}>\n//   <InputLabel id=\"facility-label\">Select Facility:</InputLabel>\n//   <Select\n//     labelId=\"facility-label\"\n//     label=\"Select Facility\"\n//     color=\"secondary\"\n//     value={facility}\n//     onChange={(e) => setFacility(e.target.value)}\n//   >\n//     {facilities.map((facility) => (\n//       <MenuItem key={facility.name} value={facility.name}>\n//         {facility.name}\n//       </MenuItem>\n//     ))}\n//   </Select>\n// </FormControl>\n\n//           </FormControl>\n//           <FormControl fullWidth  style={{ marginTop: '16px' }}>\n\n//             <TextField label=\"Select Date:\"type=\"date\" value={date} onChange={(e) => setDate(e.target.value)} />\n//           </FormControl>\n//           <FormControl fullWidth  style={{ marginTop: '16px' }}>\n\n//             <TextField label=\"Start Time\" type=\"time\" value={startTime} onChange={(e) => setStartTime(e.target.value)} />\n//           </FormControl>\n//           <FormControl fullWidth  style={{ marginTop: '16px' }}>\n\n//             <TextField label=\"End Time\"  type=\"time\" value={endTime} onChange={(e) => setEndTime(e.target.value)} />\n//           </FormControl>\n//        <Button\n//   variant=\"contained\"\n//   color=\"primary\"\n//   style={{ marginTop: '16px', backgroundColor: '#4caf50', color: 'white' }}\n//   onClick={handleBooking}\n// >\n//   Book\n// </Button>\n//         </Box>\n//         <Box mt={4} width=\"100%\">\n//           <Typography variant=\"h5\" fontWeight=\"bold\">Bookings</Typography>\n//           <TableContainer>\n//             <Table>\n//               <TableHead>\n//                 <TableRow>\n//                   <TableCell>Facility</TableCell>\n//                   <TableCell>Date</TableCell>\n//                   <TableCell>Start Time</TableCell>\n//                   <TableCell>End Time</TableCell>\n//                   <TableCell>Price (INR)/Message</TableCell>\n//                 </TableRow>\n//               </TableHead>\n//               <TableBody>\n//                 {bookings.map((booking, index) => (\n//                   <TableRow key={index}>\n//                     <TableCell>{booking.facility}</TableCell>\n//                     <TableCell>{booking.date}</TableCell>\n//                     <TableCell>{booking.startTime}</TableCell>\n//                     <TableCell>{booking.endTime}</TableCell>\n//                     <TableCell>{booking.message ? booking.message : booking.totalPrice}</TableCell>\n//                   </TableRow>\n//                 ))}\n//               </TableBody>\n//             </Table>\n//           </TableContainer>\n//         </Box>\n//       </Box>\n//     </Box>\n//   );\n\n//  }\n\n//  export default Booking","map":{"version":3,"names":[],"sources":["/home/home/Desktop/code/javascriptmethod/javascriptmMethod/assignment/src/Components/Booking.jsx"],"sourcesContent":["// import React, { useState } from 'react';\n// import {\n//   Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow,\n//   Typography, FormControl, InputLabel, Select, MenuItem, Button, TextField,\n// } from '@mui/material';\n\n// const facilities = [\n//     {\n//         name: 'Clubhouse',\n//         slots: [\n//             { startTime: '10:00', endTime: '16:00', price: 100 },\n//             { startTime: '16:00', endTime: '22:00', price: 500 },\n//         ],\n//     },\n//     {\n//         name: 'Tennis Court',\n//         slots: [{ startTime: '00:00', endTime: '23:59', price: 50 }],\n//     },\n// ];\n//  function Booking(){\n//       const [facility, setFacility] = useState(facilities[0].name);\n//     const [date, setDate] = useState('2023-08-01');\n//     const [startTime, setStartTime] = useState('10:00');\n//     const [endTime, setEndTime] = useState('11:00');\n//     const [bookings, setBookings] = useState([]);\n\n\n//   const isSlotAvailable = (facility, date, startTime, endTime) => {\n//         return !bookings.some(\n//             (booking) =>\n//                 booking.facility === facility &&\n//                 booking.date === date &&\n//                 ((startTime >= booking.startTime && startTime < booking.endTime) ||\n//                     (endTime > booking.startTime && endTime <= booking.endTime) ||\n//                     (startTime <= booking.startTime && endTime >= booking.endTime))\n//         );\n//     };\n//     const handleBooking = () => {\n//         if (!isSlotAvailable(facility, date, startTime, endTime)) {\n//             alert('Booking Failed,  Already Booked');\n//             setBookings([\n//                 ...bookings,\n//                 { facility, date, startTime, endTime, message: 'Booking Failed, Already Booked' },\n//             ]);\n//             return;\n//         }\n\n//         const facilityCon = facilities.find((config) => config.name === facility);\n//         if (!facilityCon) {\n//             alert('Invalid facility selected.');\n//             return;\n//         }\n\n//         const start = new Date(`2000-01-01T${startTime}:00`);\n//         const end = new Date(`2000-01-01T${endTime}:00`);\n//         const bookingDuration = (end - start) / (1000 * 60 * 60); // in hours\n\n//         let totalPrice = 0;\n//         for (const slot of facilityCon.slots) {\n//             const slotStart = new Date(`2000-01-01T${slot.startTime}:00`);\n//             const slotEnd = new Date(`2000-01-01T${slot.endTime}:00`);\n//             const slotDuration = (slotEnd - slotStart) / (1000 * 60 * 60); // in hours\n\n//             if (start >= slotStart && end <= slotEnd && bookingDuration <= slotDuration) {\n//                 totalPrice = slot.price * bookingDuration;\n//                 break;\n//             }\n//         }\n\n//         if (totalPrice > 0) {\n//             setBookings([...bookings, { facility, date, startTime, endTime, totalPrice }]);\n\n//             alert(`Booked, Rs. ${totalPrice}`);\n//         } else {\n\n//             alert('Booking Failed, Invalid Slot');\n//         }\n\n\n//     };\n\n\n    \n// return(\n//       <Box maxWidth=\"800px\" mx=\"auto\" p={4}>\n//       <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n//         <Typography variant=\"h5\" fontWeight=\"bold\">Facility Booking App</Typography>\n//         <Box mt={2} width=\"100%\">\n//           <FormControl fullWidth  mt={2}>\n//             <FormControl fullWidth style={{ marginTop: '16px' }}>\n//   <InputLabel id=\"facility-label\">Select Facility:</InputLabel>\n//   <Select\n//     labelId=\"facility-label\"\n//     label=\"Select Facility\"\n//     color=\"secondary\"\n//     value={facility}\n//     onChange={(e) => setFacility(e.target.value)}\n//   >\n//     {facilities.map((facility) => (\n//       <MenuItem key={facility.name} value={facility.name}>\n//         {facility.name}\n//       </MenuItem>\n//     ))}\n//   </Select>\n// </FormControl>\n\n//           </FormControl>\n//           <FormControl fullWidth  style={{ marginTop: '16px' }}>\n          \n//             <TextField label=\"Select Date:\"type=\"date\" value={date} onChange={(e) => setDate(e.target.value)} />\n//           </FormControl>\n//           <FormControl fullWidth  style={{ marginTop: '16px' }}>\n           \n//             <TextField label=\"Start Time\" type=\"time\" value={startTime} onChange={(e) => setStartTime(e.target.value)} />\n//           </FormControl>\n//           <FormControl fullWidth  style={{ marginTop: '16px' }}>\n            \n//             <TextField label=\"End Time\"  type=\"time\" value={endTime} onChange={(e) => setEndTime(e.target.value)} />\n//           </FormControl>\n//        <Button\n//   variant=\"contained\"\n//   color=\"primary\"\n//   style={{ marginTop: '16px', backgroundColor: '#4caf50', color: 'white' }}\n//   onClick={handleBooking}\n// >\n//   Book\n// </Button>\n//         </Box>\n//         <Box mt={4} width=\"100%\">\n//           <Typography variant=\"h5\" fontWeight=\"bold\">Bookings</Typography>\n//           <TableContainer>\n//             <Table>\n//               <TableHead>\n//                 <TableRow>\n//                   <TableCell>Facility</TableCell>\n//                   <TableCell>Date</TableCell>\n//                   <TableCell>Start Time</TableCell>\n//                   <TableCell>End Time</TableCell>\n//                   <TableCell>Price (INR)/Message</TableCell>\n//                 </TableRow>\n//               </TableHead>\n//               <TableBody>\n//                 {bookings.map((booking, index) => (\n//                   <TableRow key={index}>\n//                     <TableCell>{booking.facility}</TableCell>\n//                     <TableCell>{booking.date}</TableCell>\n//                     <TableCell>{booking.startTime}</TableCell>\n//                     <TableCell>{booking.endTime}</TableCell>\n//                     <TableCell>{booking.message ? booking.message : booking.totalPrice}</TableCell>\n//                   </TableRow>\n//                 ))}\n//               </TableBody>\n//             </Table>\n//           </TableContainer>\n//         </Box>\n//       </Box>\n//     </Box>\n//   );\n\n\n//  }\n\n \n//  export default Booking\n "],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA"},"metadata":{},"sourceType":"module","externalDependencies":[]}